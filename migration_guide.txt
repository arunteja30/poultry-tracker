
// follow this steps for future database migrations on Render.com free version

ðŸ”¹ 1. Make sure Flask-Migrate is set up

In your app.py you already have:

from flask_migrate import Migrate

migrate = Migrate(app, db)


Thatâ€™s good âœ…

Also add Flask-Migrate to your requirements.txt if itâ€™s not there:

Flask-Migrate

ðŸ”¹ 2. Initialize migrations (locally)

Run these commands on your local machine (not Render yet):

flask db init        # creates migrations/ folder (do this once)
flask db migrate -m "initial migration"
flask db upgrade


Now your database schema is created locally.
Commit the new migrations/ folder to git and push to GitHub (Render will see it when you deploy).

ðŸ”¹ 3. Run migrations on Render

Render wonâ€™t automatically run flask db upgrade for you, so you need to do it:

Option A: Add to Render build or start command

In your Render service settings â†’ Environment â†’ Start Command, change it to:

flask db upgrade && gunicorn app:app


This way, every time Render starts your app, it will apply migrations first.

Option B: Run manually via Render Shell

Go to your service in Render Dashboard

Click Shell

Run:

flask db upgrade

ðŸ”¹ 4. (SQLite caveat on Render)

If you use SQLite, remember itâ€™s stored in the ephemeral filesystem â†’ it resets on every deploy unless you attach a Persistent Disk.

With free tier (no disk), every deploy will wipe your DB, so migrations will run fresh each time anyway.

âœ… Recommended:

Keep flask db upgrade in your start command so migrations are always applied when the app starts.